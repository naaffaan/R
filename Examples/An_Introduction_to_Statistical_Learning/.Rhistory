```{r}
summary(mtcars)
```
```{r}
subset(mtcars, mpg > 30 & hp > 100)
```
subset(mtcars, mpg > 30 & hp > 100)
library(ggplot2)
data(diamonds)
summary(diamonds)
head(diamonds)
len(diamonds)
describe(diamonds)
library(ggplot2)
library(Hmisc)
data(diamonds)
summary(diamonds)
describe(diamonds)
ggplot(aes(x=price), data=diamonds) + geom_histogram()
a <- diamonds[price < 500,]
describe(a)
library(ggplot2)
library(Hmisc)
data(diamonds)
summary(diamonds)
describe(diamonds)
ggplot(aes(x=price), data=diamonds) + geom_histogram()
a <- diamonds[price < 500,]
describe(a)
ggplot(aes(x=price), data=diamonds) +
geom_histogram(binwidth = 10)
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(0,5000), breaks = seq(0,5000,100))
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(min(diamonds.price),5000), breaks = seq(0,5000,100))
summary(diamonds)
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(326,5000), breaks = seq(0,5000,100))
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(326,5000), breaks = seq(0,5000,10))
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(326,15000), breaks = seq(0,5000,10))
library(ggplot2)
library(gridExtra)
data(diamonds)
summary(diamonds)
ggplot(aes(x=price), data=diamonds) +
geom_histogram() +
scale_x_continuous(limits=c(326,15000), breaks = seq(0,5000,10))
p1 <- ggplot(aes(x=price), data=diamonds) + geom_histogram()
p2 <- ggplot(aes(x=log10(price)), data=diamonds) + geom_histogram()
p3 <- ggplot(aes(x=sqrt(price)), data=diamonds) + geom_histogram()
p4 <- ggplot(aes(x=price/100), data=diamonds) + geom_histogram()
p5 <- ggplot(aes(x=price), data=diamonds) + geom_histogram() +
scale_x_continuous(limits=c(5000, 15000))
grid.arrange(p1, p2, p3, p4, p5, ncol=1)
p1 <- ggplot(aes(x=price, y=cut), data=diamonds) + geom_histogram()
p1 <- ggplot(aes(x=price), data=diamonds[cut == 'Fair',]) + geom_histogram()
library(ggplot2)
library(gridExtra)
data(diamonds)
summary(diamonds)
p1 <- ggplot(aes(x=price), data=diamonds[cut == 'Fair',]) + geom_histogram()
p2 <- ggplot(aes(x=price), data=diamonds[cut == 'Good',]) + geom_histogram()
p3 <- ggplot(aes(x=price), data=diamonds[cut == 'Very Good',]) + geom_histogram()
p4 <- ggplot(aes(x=price), data=diamonds[cut == 'Premium',]) + geom_histogram()
p5 <- ggplot(aes(x=price), data=diamonds[cut == 'Ideal',]) + geom_histogram() +
grid.arrange(p1, p2, p3, p4, p5, ncol=1)
p1 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Fair') + geom_histogram()
p2 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Good') + geom_histogram()
p3 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Very Good') + geom_histogram()
p4 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Premium') + geom_histogram()
p5 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Ideal') + geom_histogram() +
grid.arrange(p1, p2, p3, p4, p5, ncol=1)
p1 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Fair') + geom_histogram()
p2 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Good') + geom_histogram()
p3 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Very Good') + geom_histogram()
p4 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Premium') + geom_histogram()
p5 <- ggplot(aes(x=price), data=subset(diamonds,cut == 'Ideal') + geom_histogram() +
grid.arrange(p1, p2, p3, p4, p5, ncol=1)
library(ggplot2)
data(diamonds)
summary(diamonds)
qplot(x=price, data=diamonds) +
facet_wrap(~cut)
qplot(x=price, data=diamonds) +
facet_wrap(~cut, ncol=1)
hist(rstudent(model3), xlab='Standarized Residuals')
setwd('G:\rFiles\Time_Series_Analysis_with_Applications_in_R')
library(TSA)
#----------------------------------------------------#
# Random Walk: Linear Model
#-------#
data(rwalk)
model1 = lm(rwalk ~ time(rwalk))
summary(model1)
plot(rwalk, type='o', ylab='Random Walk')
abline(model1)
#----------------------------------------------------#
# Temperature: Seasonal
#-------#
data(tempdub)
month. = season(tempdub) # set period
model2 = lm(tempdub ~ month.-1) # -1 removes the intercept term
summary(model2)
model3 = lm(tempdub ~ month.) # January is dropped automatically
summary(model3)
plot(y=rstudent(model3), x=as.vector(time(tempdub)),
ylab='Standardized Residuals', xlab='Time',
type='o')
plot(y=rstudent(model3), x=as.vector(time(tempdub)),
ylab='Standardized Residuals', xlab='Time',
type='l')
#points(y=rstudent(model3), x=as.vector(time(tempdub)),
#       pch=as.vector(season(tempdub)))
hist(rstudent(model3), xlab='Standarized Residuals')
qqnorm(rstudent(model3))
acf(rstudent(model3))
plot(y=rstudnet(model1), x=as.vector(time(rwalk)),
ylab='Standardized Residuals', xlab='Time', type='o')
data(rwalk)
model1 = lm(rwalk ~ time(rwalk))
summary(model1)
plot(rwalk, type='o', ylab='Random Walk')
abline(model1)
plot(y=rstudnet(model1), x=as.vector(time(rwalk)),
ylab='Standardized Residuals', xlab='Time', type='o')
plot(y=rstudent(model1), x=fitted(model1),
ylab='Standaridized Residuals', xlab='Fitted Trend Line Values',
type='p')
acf(rstudent(model1)
acf(rstudent(model1))
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
y
length (x)
length (y)
ls()
rm(x,y)
ls()
rm(list=ls())
ls()
?matrix
x=matrix (data=c(1,2,3,4) , nrow=2, ncol =2)
x
x=matrix (c(1,2,3,4) ,2,2)
x
matrix (c(1,2,3,4) ,2,2,byrow =TRUE)
sqrt(x)
x^2
x=rnorm (50)
x
y=x+rnorm (50, mean=50, sd=.1)
y
cor(x,y)
set.seed (1303)
rnorm(50)
set.seed (3)
y=rnorm (100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x=rnorm (100)
y=rnorm (100)
plot(x,y)
plot(x,y,
xlab=" this is the x-axis",
ylab=" this is the y-axis",
main=" Plot of X vs Y")
pdf ("outputs\\Figure .pdf ")
plot(x,y,col =" green ")
dev.off ()
pdf ("outputs\\Figure .pdf ")
plot(x,y,col =" green ")
dev.off ()
pdf ("outputs\\Figure.pdf ")
plot(x,y,col =" green ")
dev.off ()
pdf ("outputs\\Figure.pdf")
plot(x,y,col =" green ")
dev.off ()
pdf ("\\outputs\\Figure.pdf")
plot(x,y,col =" green ")
dev.off ()
pdf ("Figure.pdf")
plot(x,y,col =" green ")
dev.off ()
setwd('G:/rFiles/An_Introduction_to_Statistical_Learning')
pdf ("outputs/Figure.pdf")
plot(x,y,col =" green ")
dev.off ()
x=seq (1 ,10)
x=1:10
x=seq(-pi ,pi ,length =50)
x
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
f
contour (x,y,f)
contour (x,y,f,nlevels =45, add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa ,theta =30)
persp(x,y,fa ,theta =30, phi =20)
persp(x,y,fa ,theta =30, phi =70)
persp(x,y,fa ,theta =30, phi =40)
A=matrix (1:16 ,4 ,4)
A
A[2,3]
A[c(1,3) ,c(2,4) ]
A[1:3 ,2:4]
A[1:2 ,]
A[ ,1:2]
A[1,]
A[-c(1,3) ,]
dim(A)
Auto=read.table ("Auto.data ")
fix(Auto)
Auto=read.table ("Auto.data", header =T,na.strings ="?")
fix(Auto)
Auto=read.csv (" Auto.csv", header =T,na.strings ="?")
plot(cylinders , mpg)
plot(Auto$cylinders , Auto$mpg )
load.data(Auto)
pairs(Auto)
setwd('G:/rFiles/An_Introduction_to_Statistical_Learning')
library (MASS)
library (ISLR)
library (ISLR)  # data
fix(Boston )
